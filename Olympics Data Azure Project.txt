from pyspark.sql.functions import col
from pyspark.sql.types import IntegerType, DoubleType, BooleanType, DateType

configs = {"fs.azure.account.auth.type": "OAuth",
"fs.azure.account.oauth.provider.type": "org.apache.hadoop.fs.azurebfs.oauth2.ClientCredsTokenProvider",
"fs.azure.account.oauth2.client.id": "f23dadf1-eef4-483b-af50-375e09fe9df7",
"fs.azure.account.oauth2.client.secret": 'zWX8Q~7bTZbThThLAeTHRmMLmW8LwHxlCnuoScya',
"fs.azure.account.oauth2.client.endpoint": "https://login.microsoftonline.com/d4d06e2a-df59-4be0-9545-70e7d68c99fd/oauth2/token"}

dbutils.fs.mount(
source = "abfss://tokyo-olympic-data@tokyoolympicdatarajanii.dfs.core.windows.net", # contrainer@storageacc
mount_point = "/mnt/tokyoolymic",
extra_configs = configs)

%fs
ls "/mnt/tokyoolymic"

path	name	size	modificationTime
dbfs:/mnt/tokyoolymic/raw-data/	raw-data/	0	1691562179000
dbfs:/mnt/tokyoolymic/transformed-data/	transformed-data/	0	1691562189000


athlete = spark.read.format("csv").option("header","true").load("/mnt/tokyoolymic/raw-data/athlete.csv")
Coaches = spark.read.format("csv").option("header","true").load("/mnt/tokyoolymic/raw-data/Coaches.csv")
entriesgender = spark.read.format("csv").option("header","true").load("/mnt/tokyoolymic/raw-data/entriesgender.csv")
Medals = spark.read.format("csv").option("header","true").load("/mnt/tokyoolymic/raw-data/Medals.csv")
Teams = spark.read.format("csv").option("header","true").load("/mnt/tokyoolymic/raw-data/Teams.csv")

athlete:pyspark.sql.dataframe.DataFrame = [PersonName: string, Country: string ... 1 more field]
Coaches:pyspark.sql.dataframe.DataFrame = [Name: string, Country: string ... 2 more fields]
entriesgender:pyspark.sql.dataframe.DataFrame = [Discipline: string, Female: string ... 2 more fields]
Medals:pyspark.sql.dataframe.DataFrame = [Rank: string, Team_Country: string ... 5 more fields]
Teams:pyspark.sql.dataframe.DataFrame = [TeamName: string, Discipline: string ... 2 more fields]


-----------------+--------------------+-------------------+
|          PersonName|             Country|         Discipline|
+--------------------+--------------------+-------------------+
|     AALERUD Katrine|              Norway|       Cycling Road|
|         ABAD Nestor|               Spain|Artistic Gymnastics|
|   ABAGNALE Giovanni|               Italy|             Rowing|
|      ABALDE Alberto|               Spain|         Basketball|
|       ABALDE Tamara|               Spain|         Basketball|
|           ABALO Luc|              France|           Handball|
|        ABAROA Cesar|               Chile|             Rowing|
|       ABASS Abobakr|               Sudan|           Swimming|
|    ABBASALI Hamideh|Islamic Republic ...|             Karate|
|       ABBASOV Islam|          Azerbaijan|          Wrestling|
|        ABBINGH Lois|         Netherlands|           Handball|
|         ABBOT Emily|           Australia|Rhythmic Gymnastics|
|       ABBOTT Monica|United States of ...|  Baseball/Softball|
|ABDALLA Abubaker ...|               Qatar|          Athletics|
|      ABDALLA Maryam|               Egypt|  Artistic Swimming|
|      ABDALLAH Shahd|               Egypt|  Artistic Swimming|
| ABDALRASOOL Mohamed|               Sudan|               Judo|
|   ABDEL LATIF Radwa|               Egypt|           Shooting|
|    ABDEL RAZEK Samy|               Egypt|           Shooting|
|   ABDELAZIZ Abdalla|               Egypt|             Karate|
+--------------------+--------------------+-------------------+
only showing top 20 rows


athlete.printSchema()

root
 |-- PersonName: string (nullable = true)
 |-- Country: string (nullable = true)
 |-- Discipline: string (nullable = true)


entriesgender = entriesgender.withColumn("Female",col("Female").cast(IntegerType()))\
    .withColumn("Male",col("Male").cast(IntegerType()))\
    .withColumn("Total",col("Total").cast(IntegerType()))
	
entriesgender:pyspark.sql.dataframe.DataFrame = [Discipline: string, Female: integer ... 2 more fields]

entriesgender.printSchema()

root
 |-- Discipline: string (nullable = true)
 |-- Female: integer (nullable = true)
 |-- Male: integer (nullable = true)
 |-- Total: integer (nullable = true)
 
 # Find the top countries with the highest number of gold medals
top_gold_medal_countries = Medals.orderBy("Gold", ascending=False).select("Team_Country","Gold").show()

+--------------------+----+
|        Team_Country|Gold|
+--------------------+----+
|                Cuba|   7|
|         New Zealand|   7|
|              Canada|   7|
|              Brazil|   7|
|   Republic of Korea|   6|
|             Hungary|   6|
|              Poland|   4|
|             Jamaica|   4|
|               Kenya|   4|
|      Czech Republic|   4|
|              Norway|   4|
|United States of ...|  39|
|People's Republic...|  38|
|              Sweden|   3|
|               Spain|   3|
|             Denmark|   3|
|         Switzerland|   3|
|             Croatia|   3|
|              Serbia|   3|
|Islamic Republic ...|   3|
+--------------------+----+
only showing top 20 rows


# Calculate the average number of entries by gender for each discipline
average_entries_by_gender = entriesgender.withColumn(
    'Avg_Female', entriesgender['Female'] / entriesgender['Total']
).withColumn(
    'Avg_Male', entriesgender['Male'] / entriesgender['Total']
)
average_entries_by_gender.show()


+--------------------+------+----+-----+-------------------+-------------------+
|          Discipline|Female|Male|Total|         Avg_Female|           Avg_Male|
+--------------------+------+----+-----+-------------------+-------------------+
|      3x3 Basketball|    32|  32|   64|                0.5|                0.5|
|             Archery|    64|  64|  128|                0.5|                0.5|
| Artistic Gymnastics|    98|  98|  196|                0.5|                0.5|
|   Artistic Swimming|   105|   0|  105|                1.0|                0.0|
|           Athletics|   969|1072| 2041| 0.4747672709456149| 0.5252327290543851|
|           Badminton|    86|  87|  173|0.49710982658959535| 0.5028901734104047|
|   Baseball/Softball|    90| 144|  234|0.38461538461538464| 0.6153846153846154|
|          Basketball|   144| 144|  288|                0.5|                0.5|
|    Beach Volleyball|    48|  48|   96|                0.5|                0.5|
|              Boxing|   102| 187|  289|0.35294117647058826| 0.6470588235294118|
|        Canoe Slalom|    41|  41|   82|                0.5|                0.5|
|        Canoe Sprint|   123| 126|  249| 0.4939759036144578| 0.5060240963855421|
|Cycling BMX Frees...|    10|   9|   19| 0.5263157894736842|0.47368421052631576|
|  Cycling BMX Racing|    24|  24|   48|                0.5|                0.5|
|Cycling Mountain ...|    38|  38|   76|                0.5|                0.5|
|        Cycling Road|    70| 131|  201| 0.3482587064676617| 0.6517412935323383|
|       Cycling Track|    90|  99|  189|0.47619047619047616| 0.5238095238095238|
|              Diving|    72|  71|  143| 0.5034965034965035| 0.4965034965034965|
|          Equestrian|    73| 125|  198| 0.3686868686868687| 0.6313131313131313|
|             Fencing|   107| 108|  215|0.49767441860465117| 0.5023255813953489|
+--------------------+------+----+-----+-------------------+-------------------+
only showing top 20 rows


athlete.repartition(1).write.mode("overwrite").option("header",'true').csv("/mnt/tokyoolymic/transformed-data/athlete")

Coaches.repartition(1).write.mode("overwrite").option("header","true").csv("/mnt/tokyoolymic/transformed-data/Coaches")
entriesgender.repartition(1).write.mode("overwrite").option("header","true").csv("/mnt/tokyoolymic/transformed-data/entriesgender")
Medals.repartition(1).write.mode("overwrite").option("header","true").csv("/mnt/tokyoolymic/transformed-data/Medals")
Teams.repartition(1).write.mode("overwrite").option("header","true").csv("/mnt/tokyoolymic/transformed-data/Teams")